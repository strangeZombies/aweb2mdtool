import { Fragment } from 'preact';
import { useSignal } from '@preact/signals';
import { useEffect, useCallback } from 'preact/hooks';
import { options } from './options';
import { useTranslation } from '@/i18n';

export function App() {
  const { t } = useTranslation();
  const showControlPanel = useSignal<boolean>(options.get('showControlPanel') ?? false);
  const currentTheme = useSignal(options.get('theme'));
  const showToggleButton = useSignal<boolean>(options.get('showToggleButton') ?? false);

  const openControlPanel = () => {
    showControlPanel.value = true;
    options.set('showControlPanel', true);
  };

  const closeControlPanel = () => {
    showControlPanel.value = false;
    options.set('showControlPanel', false);
  };

  const toggleControlPanel = () => {
    return showControlPanel.value ? closeControlPanel() : openControlPanel();
  };

  const toggleMenu = () => {
    if (showToggleButton.value || showControlPanel.value) {
      showToggleButton.value = false;
      options.set('showToggleButton', false);
      closeControlPanel();
    } else {
      // 如果按钮或控制面板可见，则显示它们
      showToggleButton.value = true;
      options.set('showToggleButton', true);
      openControlPanel();
    }
  };

  const cleanup = useCallback(() => {
    closeControlPanel();
    const modalElement = document.getElementById('mo');
    if (modalElement) {
      modalElement.remove();
    }
    console.log('模态窗口已关闭并清理');
  }, []);

  useEffect(() => {
    const updateTheme = () => {
      currentTheme.value = options.get('theme');
    };

    options.signal.subscribe(updateTheme);

    if (typeof GM_registerMenuCommand === 'function') {
      GM_registerMenuCommand(t('ToggleControlPanel'), toggleMenu);
    }

    return cleanup;
  }, [t, cleanup]);

  return (
    <Fragment>
      <div>
        {showToggleButton.value && (
          <button
            data-theme={currentTheme.value}
            className="btn"
            onClick={toggleControlPanel}
            aria-label={t('toggleControlPanel')}
          >
            {t('OpenModal')}
          </button>
        )}
        {showControlPanel.value && (
          <dialog
            data-theme={currentTheme.value}
            className="modal modal-open"
            id="mo"
            open
            aria-labelledby="modal-title"
            aria-describedby="modal-description"
          >
            <div className="modal-box w-11/12 max-w-5xl">
              <h3 id="modal-title" className="font-bold text-lg">
                {t('ModalTitle')}
              </h3>
              <p id="modal-description" className="py-4">
                {t('ModalDescription')}
              </p>
              <div className="modal-action">
                <button className="btn" onClick={closeControlPanel} aria-label={t('Close')}>
                  {t('Close')}
                </button>
              </div>
            </div>
          </dialog>
        )}
      </div>
    </Fragment>
  );
}
